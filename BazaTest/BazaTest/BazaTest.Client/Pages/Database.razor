@page "/dnevnik-term"
@using System.Net.Http.Json
@using BazaTest.Client.Models
@inject HttpClient Http
@rendermode InteractiveAuto

<h3>Dnevnik Term Data</h3>

<div class="btn-group mb-3">
    <button class="btn btn-primary @(activeTab == "efcore" ? "active" : "")" @onclick="@(() => SwitchTab("efcore"))">
        Entity Framework Core
    </button>
    <button class="btn btn-primary @(activeTab == "dapper" ? "active" : "")" @onclick="@(() => SwitchTab("dapper"))">
        Dapper
    </button>
    <button class="btn btn-primary @(activeTab == "oracleclient" ? "active" : "")" @onclick="@(() => SwitchTab("oracleclient"))">
        Oracle Client
    </button>
</div>
<div class="mt-3">
    <p>
        <strong>Data Source:</strong> @currentSource
    </p>
    <p>
        <strong>Records:</strong> @(dnevnikTerms?.Count ?? 0) / @totalRecords
    </p>

</div>
@if (loading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    @if (error != null)
    {
        <div class="alert alert-danger">
            @error
        </div>
    }

    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Date</th>
                    <th>Card ID</th>
                    <th>Type</th>
                    <th>Status</th>
                    <th>Status Desc</th>
                    <th>User Name</th>
                    <th>User Action</th>
                    <th>Event Name</th>
                    <th>IP</th>
                    <th>Station</th>
                    <th>System ID</th>
                    <th>Door ID</th>
                    <th>Company ID</th>
                    <th>Card ID</th>
                    <th>Type ID</th>
                    <th>In/Out</th>
                    <th>Session Type</th>
                    <th>User App</th>
                    <th>User IP</th>
                    <th>Read Date</th>
                </tr>
            </thead>
            <tbody>
                @if (dnevnikTerms != null && dnevnikTerms.Any())
                {
                    @foreach (var item in dnevnikTerms)
                    {
                        <tr>
                            <td>@item.Id</td>
                            <td>@item.DtDate?.ToString("yyyy-MM-dd")</td>
                            <td>@item.DtVCardId</td>
                            <td>@item.DtType</td>
                            <td>@item.DtStatus</td>
                            <td>@item.DtStatusDesc</td>
                            <td>@item.DtUserName</td>
                            <td>@item.DtUserAction</td>
                            <td>@item.DtNastanIme</td>
                            <td>@item.DtTIp</td>
                            <td>@item.DtUserStation</td>
                            <td>@item.DtFIdSystem</td>
                            <td>@item.DtDoorId</td>
                            <td>@item.DtVFirmaId</td>
                            <td>@item.DtVCardId</td>
                            <td>@item.DtTId</td>
                            <td>@item.DtInOut</td>
                            <td>@item.DtType</td>
                            <td>@item.DtUserApp</td>
                            <td>@item.DtUserIp</td>
                            <td>@item.DtDateRead?.ToString("yyyy-MM-dd")</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="21" class="text-center">No data available</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="mt-3">
        <p>
            <strong>Data Source:</strong> @currentSource
        </p>
        <p>
            <strong>Records:</strong> @(dnevnikTerms?.Count ?? 0)
        </p>
   
    </div>
}

@code {
    private int totalRecords;

    private string activeTab = "efcore";
    private List<Dnevnik_Term>? dnevnikTerms;
    private bool loading = false;
    private string? error;
    private string? currentSource = "None";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task SwitchTab(string tab)
    {
        activeTab = tab;
        await LoadData();
    }

    private async Task LoadData()
    {
        loading = true;
        error = null;

        try
        {
            if (activeTab == "efcore")
            {
            
                dnevnikTerms = await Http.GetFromJsonAsync<List<Dnevnik_Term>>($"http://localhost:5014/api/Database/{activeTab}");
                var countResponse = await Http.GetFromJsonAsync<int>($"http://localhost:5014/api/Database/{activeTab}/count");
                totalRecords = countResponse;
                currentSource = "Entity Framework Core";
            }
            else if (activeTab == "dapper")
            {
        
                var queryableData = await Http.GetFromJsonAsync<List<Dnevnik_Term>>($"http://localhost:5014/api/Database/{activeTab}");
                var countResponse = await Http.GetFromJsonAsync<int>($"http://localhost:5014/api/Database/{activeTab}/count");
                totalRecords = countResponse;
                currentSource = "Dapper";
            }
            else
            {
                dnevnikTerms = await Http.GetFromJsonAsync<List<Dnevnik_Term>>($"http://localhost:5014/api/Database/{activeTab}");
                var countResponse = await Http.GetFromJsonAsync<int>($"http://localhost:5014/api/Database/{activeTab}/count");
                totalRecords = countResponse;
                currentSource = "Oracle";

            }
        }
        catch (Exception ex)
        {
            error = $"Error loading data: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }
}
